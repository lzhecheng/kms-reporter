// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/etcd/etcd.go

// Package mock_etcd is a generated GoMock package.
package mock_etcd

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v3 "go.etcd.io/etcd/client/v3"
)

// MockEtcdClientOperator is a mock of EtcdClientOperator interface.
type MockEtcdClientOperator struct {
	ctrl     *gomock.Controller
	recorder *MockEtcdClientOperatorMockRecorder
}

// MockEtcdClientOperatorMockRecorder is the mock recorder for MockEtcdClientOperator.
type MockEtcdClientOperatorMockRecorder struct {
	mock *MockEtcdClientOperator
}

// NewMockEtcdClientOperator creates a new mock instance.
func NewMockEtcdClientOperator(ctrl *gomock.Controller) *MockEtcdClientOperator {
	mock := &MockEtcdClientOperator{ctrl: ctrl}
	mock.recorder = &MockEtcdClientOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEtcdClientOperator) EXPECT() *MockEtcdClientOperatorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEtcdClientOperator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEtcdClientOperatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEtcdClientOperator)(nil).Close))
}

// Get mocks base method.
func (m *MockEtcdClientOperator) Get(ctx context.Context, key string, opts ...v3.OpOption) (*v3.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v3.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEtcdClientOperatorMockRecorder) Get(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEtcdClientOperator)(nil).Get), varargs...)
}
