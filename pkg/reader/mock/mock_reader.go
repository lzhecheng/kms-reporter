// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/reader/reader.go
//
// Generated by this command:
//
//	mockgen -source pkg/reader/reader.go ReaderOperator
//

// Package mock_reader is a generated GoMock package.
package mock_reader

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReaderOperator is a mock of ReaderOperator interface.
type MockReaderOperator struct {
	ctrl     *gomock.Controller
	recorder *MockReaderOperatorMockRecorder
	isgomock struct{}
}

// MockReaderOperatorMockRecorder is the mock recorder for MockReaderOperator.
type MockReaderOperatorMockRecorder struct {
	mock *MockReaderOperator
}

// NewMockReaderOperator creates a new mock instance.
func NewMockReaderOperator(ctrl *gomock.Controller) *MockReaderOperator {
	mock := &MockReaderOperator{ctrl: ctrl}
	mock.recorder = &MockReaderOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderOperator) EXPECT() *MockReaderOperatorMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReaderOperator) Read(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockReaderOperatorMockRecorder) Read(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReaderOperator)(nil).Read), ctx, namespace)
}
