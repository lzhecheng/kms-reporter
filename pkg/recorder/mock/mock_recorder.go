// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/recorder/recorder.go

// Package mock_recorder is a generated GoMock package.
package mock_recorder

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRecorderOperator is a mock of RecorderOperator interface.
type MockRecorderOperator struct {
	ctrl     *gomock.Controller
	recorder *MockRecorderOperatorMockRecorder
}

// MockRecorderOperatorMockRecorder is the mock recorder for MockRecorderOperator.
type MockRecorderOperatorMockRecorder struct {
	mock *MockRecorderOperator
}

// NewMockRecorderOperator creates a new mock instance.
func NewMockRecorderOperator(ctrl *gomock.Controller) *MockRecorderOperator {
	mock := &MockRecorderOperator{ctrl: ctrl}
	mock.recorder = &MockRecorderOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecorderOperator) EXPECT() *MockRecorderOperatorMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockRecorderOperator) Record(ctx context.Context, namespace string, encryptedSecrets, unencryptedSecrets []string, allSecretsUseLatestProvider bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", ctx, namespace, encryptedSecrets, unencryptedSecrets, allSecretsUseLatestProvider)
	ret0, _ := ret[0].(error)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockRecorderOperatorMockRecorder) Record(ctx, namespace, encryptedSecrets, unencryptedSecrets, allSecretsUseLatestProvider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockRecorderOperator)(nil).Record), ctx, namespace, encryptedSecrets, unencryptedSecrets, allSecretsUseLatestProvider)
}
